import hashlib

L1 = [250, 314, 334, 459, 462, 502, 514, 579, 623, 633, 639, 644, 652, 966, 986, 1024, 1041, 1065, 1195, 1234, 1321,
      1337, 1338, 1424, 1430, 1546, 1644, 1742, 1751, 1776, 1787, 1918, 1962, 1981, 2054, 2055, 2056, 2095, 2256, 2264,
      2272, 2275, 2329, 2372, 2446, 2458, 2484, 2488, 2543, 2559, 2713, 2733, 2744, 2808, 2876, 2885, 2892, 2931, 2941,
      2991, 2999, 3111, 3254, 3256, 3258, 3396, 3426, 3435, 3576, 3581, 3663, 3694, 3737, 3740, 3923, 3925, 3988, 4054,
      4154, 4160, 4165, 4168, 4176, 4178, 4223, 4225, 4274, 4283, 4314, 4477, 4479, 4527, 4555, 4618, 4630, 4633, 4733,
      4757, 4813, 4839, 5084, 5195, 5299, 5395, 5409, 5409, 5442, 5495, 5566, 5584, 5625, 5736, 5828, 5860, 5901, 5944,
      6045, 6107, 6113, 6142, 6325, 6330, 6400, 6428, 6436, 6463, 6481, 6497, 6507, 6572, 6573, 6601, 6649, 6734, 6770,
      6824, 6835, 6847, 6882, 6889, 6920, 6985, 7072, 7090, 7147, 7167, 7190, 7195, 7233, 7345, 7347, 7401, 7420, 7461,
      7469, 7514, 7528, 7538, 7540, 7558, 7676, 7731, 7746, 7818, 7819, 7837, 7847, 7875, 8043, 8087, 8108, 8155, 8184,
      8220, 8267, 8283, 8327, 8396, 8434, 8466, 8467, 8524, 8533, 8668, 8770, 8802, 8843, 8900, 8959, 9229, 9264, 9436,
      9488, 9532, 9578, 9672, 9702, 9847, 9922, 9947]

L2 = [4, 24, 51, 106, 181, 234, 244, 312, 339, 350, 352, 379, 464, 530, 641, 652, 668, 741, 760, 766, 852, 930, 1128,
      1195, 1254, 1290, 1305, 1345, 1373, 1410, 1415, 1457, 1574, 1592, 1640, 1694, 1698, 1720, 1724, 1727, 1753, 1883,
      1901, 1954, 1984, 2057, 2075, 2135, 2171, 2184, 2260, 2265, 2282, 2291, 2331, 2421, 2446, 2506, 2531, 2579, 2631,
      2724, 2748, 2820, 2878, 2926, 3043, 3159, 3203, 3253, 3360, 3390, 3588, 3682, 3683, 3794, 3873, 3884, 3977, 3998,
      4060, 4182, 4184, 4221, 4224, 4247, 4257, 4259, 4304, 4446, 4464, 4485, 4530, 4553, 4598, 4607, 4617, 4684, 4731,
      4744, 4849, 4867, 4868, 5051, 5065, 5096, 5172, 5218, 5248, 5288, 5310, 5343, 5358, 5384, 5398, 5398, 5519, 5553,
      5562, 5564, 5568, 5578, 5583, 5622, 5685, 5685, 5699, 5700, 5895, 5910, 5970, 5981, 5995, 6021, 6030, 6052, 6080,
      6222, 6252, 6265, 6401, 6428, 6454, 6542, 6612, 6678, 6760, 6763, 6811, 6845, 6880, 6891, 6971, 7040, 7055, 7097,
      7164, 7211, 7212, 7278, 7278, 7347, 7482, 7537, 7563, 7634, 7802, 7804, 7928, 8018, 8029, 8115, 8125, 8140, 8230,
      8454, 8467, 8473, 8521, 8557, 8628, 8631, 8643, 8698, 8781, 8815, 8917, 9067, 9068, 9207, 9370, 9447, 9451, 9496,
      9526, 9664, 9697, 9845, 9877, 9952]


def L1_sort(L):
    """ 第一位任務：
        將 L1 進行升序排序，排序演算法不限，唯禁止使用內建或第三方函式庫的 sort
    """

    return L


def L2_sort(L):
    """ 第二位任務：
        將 L2 進行升序排序，排序演算法不限，唯禁止使用內建或第三方函式庫的 sort
    """

    return L


def list_processing(L1, L2):
    """ 第三位任務：
        0. 先設定一個長度為 512-bit 的字串 S，所有 bit 皆為 0
        1. 將 L1’ 與 L2’ 做完交集得到 L’
        2. 將 L’ 裡面的每個數字 x 丟到 sha256 得到 sha256(x) (這邊請直接將 int 轉為 str 去做 hash)
        3. 取每個 sha256(x) 的最後 9-bit 轉成數字 y (範圍是 0~511) (請將 hash 的結果轉為 binary 再取最後 9-bit)
        4. 將 S 內的第 y 個 bit 設為 1 (每個 y 都要做喔)
    """


def binary_tree(L):
    """ 第四位任務：
        將 L1’ 與 L2’ 交集後的結果建成 binary tree(盡可能平衡) 並輸出
    """
    pass


if __name__ == "__main__":
    """ main program here """
